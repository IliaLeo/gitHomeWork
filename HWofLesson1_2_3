# Инструкция по работе с Git.
![gitlogo.jpg](gitlogo.jpg)

## 1.  Что такое *Git*?
_Git_ - это консольная утилита, для отслеживания и ведения истории изменения файлов, в вашем проекте. Чаще всего его используют для кода, но можно и для других файлов. Например, для картинок - полезно для дизайнеров.

## 2. Для чего нужен *Git*?
С помощью _Git_ -a вы можете откатить свой проект до более старой версии, сравнивать, анализировать или сливать свои изменения в репозиторий.

## 3. Что такое репозиторий? 
Репозиторием называют хранилище вашего кода и историю его изменений. Git работает локально и все ваши репозитории хранятся в определенных папках на жестком диске.

## 4.  Основные команды:
* Строка для создания конфликта
### 4.1. Основные комманды из первого урока.

* **git init:**

    * *Инициализация локального репозитория.*

* **git status:**

    * *Получить информацию от git о его текущем состоянии.*

* **git add:**

    * *Добавить файл или файлы к следующему коммиту.*

* **git commit -m “message”:**

    * *Создание коммита.*

* **git log:**
    * *Вывод на экран истории всех коммитов с их хеш-кодами.*
### 4.2. Основные комманды из второго урока.
* **git branch:**
    * *Посмотреть список веток в репозитории.*
* **git branch <название ветки>:**
    * *Создать новую ветку.*
* **git checkout <название ветки>:**
    * *Переход к другой ветке.*
* **git branch -d <название ветки>:**
    * *Удалить ветку.*

## 5. Ссылки

### Ссылки из второго урока
* Информация взята со следующих ресурсов:
    * [Информация по .gitignore](https://www.atlassian.com/ru/git/tutorials/saving-changes/gitignore)
    * [Презентация GB по Git ко второму семинару](https://gbcdn.mrgcdn.ru/uploads/asset/5419537/attachment/667639472bc4aceaafe674764be02602.pdf)
### Ссылки с первого урока
* Информация взята со следующих ресурсов:
    * [Презентация GB](https://gbcdn.mrgcdn.ru/uploads/asset/5419537/attachment/667639472bc4aceaafe674764be02602.pdf)
    * [Статья на HABR](https://habr.com/ru/articles/541258/)
    * [~~Ой не та ссылка~~](https://www.google.com/imgres?imgurl=https%3A%2F%2Fi.pinimg.com%2F236x%2Ff2%2Faf%2F2d%2Ff2af2d731c56bbaa4223bccaaa1d3a03.jpg&tbnid=-y_Qh-m5kiBRMM&vet=10CBcQxiAoB2oXChMIwIim1seYgQMVAAAAAB0AAAAAEAc..i&imgrefurl=https%3A%2F%2Fwww.pinterest.com%2Fviksnaernests%2F%25D0%25BB%25D1%258F%25D0%25B3%25D1%2583%25D1%2588%25D0%25B5%25D0%25BD%25D0%25BE%25D0%25BA-%25D0%25BF%25D0%25B5%25D0%25BF%25D0%25B5%2F&docid=J3KgQN43NTltPM&w=235&h=210&itg=1&q=%D0%BC%D0%B5%D0%BC&ved=0CBcQxiAoB2oXChMIwIim1seYgQMVAAAAAB0AAAAAEAc)

## 6. Конфликты в *Git*

### 1.  Что такое кофликт?
![structureConflict.png](structureConflict.png)
*Конфликт в Git возникает, когда две или более ветки изменяют одну и ту же часть файла одновременно и не удается автоматически объединить эти изменения. В результате Git не может определить, какие изменения должны быть сохранены, и требуется ручное участие пользователя для разрешения конфликта.*

### 2. Как решить конфликт?
После слияния в случая возникновения конфликта будут доступны 4 кнопки для его решения:

* _Accept Current Change_ – выбрать изменения, сделанные локально, показаны зеленым

* _Accept Incoming Change_ – выбрать удаленные изменения – показаны синим

* _Accept Both Changes_ – убрать символы <<< === >>> и оставить оба изменения

* _Compare Changes_ – сравнить. Если выбрать эту опцию, то VS покажет изменения друг напротив друга. Очень удобно бывает понять, что именно вы хотите выбрать.

### 3. Примеры конфликтов возникших при слиянии веток в данной инструкции.
#### 1) Пример конфликта возникший при слиянии ветки commandsOfSecondLesson
![conflict_1.JPG](conflict_1.JPG)

#### 2) Пример конфликта возникший при слиянии ветки conflicts
![conflict_2.JPG](conflict_2.JPG)

#### 3) Пример конфликта возникший при слиянии ветки gitignorWork
![conflict_3.JPG](conflict_3.JPG)

#### 4) Пример конфликта возникший при слиянии ветки RefOfSecondLesson
![conflict_4.JPG](conflict_4.JPG)

## 7. Правила работы с файлом .gitignore
### **Что такое игнорируемые файлы в _Git_?**
*Git рассматривает каждый файл в вашей рабочей копии как файл одного из трех нижеуказанных типов.*

* *Отслеживаемый файл — файл, который был предварительно проиндексирован или зафиксирован в коммите.*

* *Неотслеживаемый файл — файл, который не был проиндексирован или зафиксирован в коммите.
Игнорируемый файл — файл, явным образом помеченный для Git как файл, который необходимо игнорировать.*

* *Игнорируемые файлы — это, как правило, артефакты сборки и файлы, генерируемые машиной из исходных файлов в вашем репозитории, либо файлы, которые по какой-либо иной причине не должны попадать в коммиты.*

### **Как _Git_ работает с игнорируемыми файлами?**
*Игнорируемые файлы отслеживаются в специальном файле __.gitignore__, который регистрируется в корневом каталоге репозитория. В Git нет специальной команды для указания игнорируемых файлов: вместо этого необходимо вручную отредактировать файл __.gitignore__, чтобы указать в нем новые файлы, которые должны быть проигнорированы. Файлы __.gitignore__ содержат шаблоны, которые сопоставляются с именами файлов в репозитории для определения необходимости игнорировать эти файлы.*

### Примеры как игнорировать картинки в Git:

1. Указать имя файла с расширением: conflict_1.jpg

2. Указать тип игнорируемого файла: *.расширение_файла. В этом случае все файлы с таким расширением лежащие в репозитории будут игнорированы.

3. Указать тип игнрируемого файло чере слеш: */.расщирение_файла. В этом случае все файлы с таким расширением, лежащие в папках внутри репозитория будут тоже игнорированы. 
